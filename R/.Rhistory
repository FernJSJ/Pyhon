species <- read.csv('C:\Users\14256\Documents\R_JSJ\PCA species environment gradient.csv', header = T) # see following table for data
species <- read.csv("C:/Users/14256/Documents/R_JSJ/PCA species environment gradient.csv", header = T) # see following table for data
rownames(species) <- species$site
species <- species[,-1] #remove the first column (row names)
pca <- princomp(species)
biplot(pca)
library(ca)
ca(species)
plot(ca(species))
library(vegan);
install.packages(vegan)
library(BiocManager)
install('vegan')
library(vegan)
library(permute)
library(lattice)
library(vegan)
plot(decorana(species))
Cluster analysis
library(ape)
install('ape')
library(ape)
cars = apply(mtcars, 2, scale, center=TRUE, scale=TRUE)
dis <- vegdist(cars, "bray")
dis <- vegdist(cars, "bray")
dis <- vegdist(cars, "euclidean")
dis <- vegdist(cars, "manhattan")
dis <- vegdist(cars, "jaccard")
res <- pcoa(dis) # library(ape)
biplot(res, cars)
NMDS <- metaMDS (mtcars)
par (mfrow = c(1,2),mar=c(5,4,3,2))
stressplot (NMDS)
plot (NMDS)
NMDS <- metaMDS (mtcars) # vegan
ordiplot(NMDS, type = "n")
orditorp(NMDS, display = "species", col = "red", air = 0.01, cex = 1.5) # column
orditorp(NMDS, display = "sites", cex = 1, air = 0.01) # row
library(permute)
library(vegan)
perf = mtcars[,c('mpg', 'hp', 'qsec')]
status = mtcars[,c('cyl', 'disp', 'drat', 'wt', 'gear', 'carb')]
vare.mds<- metaMDS(status)
# Fits an Environmental Vector or Factor onto an Ordination
ef <- envfit(vare.mds, perf, permu = 999)
plot(vare.mds, display = "sites")
plot(ef, p.max = 0.05)
ef <- envfit(vare.mds ~ mpg + hp, perf)
plot(vare.mds, display = "sites")
plot(ef)
tmp <- with(perf, ordisurf(vare.mds, mpg, add = TRUE))
with(perf, ordisurf(vare.mds, hp, add = TRUE, col = "green4"))
library(vegan)
mtcars = mtcars[order(mtcars$cyl), ]
mtcars = mtcars[, c('mpg','cyl','disp','hp','drat','wt', 'qsec','gear', 'carbâ€™)]
table(mtcars$cyl)
library(vegan)
mtcars = mtcars[order(mtcars$cyl), ]
table(mtcars$cyl) # 11, 6, 14
NMDS = metaMDS(mtcars, k=3) # cyl = 4, 6, 8
treat = c(rep("Treatment1",11), rep("Treatment2",6), rep("Treatment3",14))
colors = c(rep("red",11), rep("blue",6), rep("green",14))
ordiplot(NMDS, type = "n")
for(i in unique(treat)) {
ordihull(NMDS$point[grep(i, treat),], draw = "polygon", # Plot convex hulls with colors based on treatment
groups = treat[treat==i], col = colors[grep(i, treat)], label = F) }
orditorp(NMDS, display = "species", col = "black", air = 0.01, cex = 1.2)
colors = c(rep("darkred",11), rep("darkblue",6), rep("darkgreen",14))
orditorp(NMDS, display = "sites", col = colors, air = 0.01, cex = 0.8)
library(vegan) # rda() is in this library
X <- matrix(rnorm(120),ncol=5) # vegan reveres the X and Y.
Y <- matrix(rnorm(120),ncol=5)
colnames(X) = c('X1','X2','X3','X4','X5')
X=data.frame(X, X6 = rep(1:3, each = 8))
colnames(Y) = c('Y1','Y2','Y3','Y4','Y5')
rda.results <- rda(X,Y) # X = Community data matrix; Y = Constraining matrix, typically of environmental variables
plot(rda(X,Y), scaling =1) # Distance triplot
plot(rda(X,Y), scaling =2) # Correlation triplot
# mtcars
stat = scale(mtcars[, c('cyl','disp', 'drat', 'wt', 'vs', 'am', 'gear', 'carb')])
perf = scale(mtcars[, c('mpg','hp', 'qsec')])
RDA <- rda(perf, stat)
stat = as.data.frame(stat)
perf = as.data.frame(perf)
RDA <- rda(perf ~., data= stat) #same
plot(RDA, scaling =1, main="Scaling1") # Distance triplot
plot(RDA, scaling =2, main="Scaling2") # Correlation triplot
plot(RDA) # as same as the correlation triplot
library(vegan) # rda() is in this library
X <- matrix(rnorm(120),ncol=5) # vegan reveres the X and Y.
Y <- matrix(rnorm(120),ncol=5)
colnames(X) = c('X1','X2','X3','X4','X5')
X=data.frame(X, X6 = rep(1:3, each = 8))
colnames(Y) = c('Y1','Y2','Y3','Y4','Y5')
rda.results <- rda(X,Y) # X = Community data matrix; Y = Constraining matrix, typically of environmental variables
plot(rda(X,Y), scaling =1) # Distance triplot
plot(rda(X,Y), scaling =2) # Correlation triplot
# mtcars
stat = scale(mtcars[, c('cyl','disp', 'drat', 'wt', 'vs', 'am', 'gear', 'carb')])
perf = scale(mtcars[, c('mpg','hp', 'qsec')])
RDA <- rda(perf, stat)
stat = as.data.frame(stat)
perf = as.data.frame(perf)
RDA <- rda(perf ~., data= stat) #same
plot(RDA, scaling =1, main="Scaling1") # Distance triplot
plot(RDA, scaling =2, main="Scaling2") # Correlation triplot
plot(RDA) # as same as the correlation triplot
goodness(RDA)
coef(RDA)
RDA$CCA$u
cor(RDA$CCA$u[,1], RDA$CCA$wa[,1]) # 0.96
spenvcor(RDA)
summary(RDA)
plot(RDA, scaling =1, main="Scaling1") # Distance triplot
plot(RDA, perf), scaling =2, main="Scaling2") # Correlation triplot
plot(RDA, perf), scaling =2, main="Scaling2") # Correlation triplot
plot(RDA, perf, scaling =2, main="Scaling2") # Correlation triplot
plot(RDA, perf), scaling =2, main="Scaling2") # Correlation triplot
plot(RDA,perf),scaling =2,main="Scaling2")
plot(RDA, scaling =1, main="Scaling1") # Distance triplot
plot(RDA,perf),scaling =2,main="Scaling2") # Correlation triplot
plot(RDA, scaling =2, main="Scaling2") # Correlation triplot
points(RDA$CCA$u[, c(1,2)], col = "green", pch=16) # no match
points(RDA$CCA$wa[, c(1,2)]*3, col = "purple", pch=16) # match well
points(RDA$CCA$biplot[, c(1,2)]*1.2, col = "red", pch=16) # match wellplot(RDA, scaling =1, main="Scaling1") # Distance triplot
plot(RDA,perf),scaling =2,main="Scaling2") # Correlation triplot
plot(RDA, scaling =2, main="Scaling2") # Correlation triplot
points(RDA$CCA$u[, c(1,2)], col = "green", pch=16) # no match
points(RDA$CCA$wa[, c(1,2)]*3, col = "purple", pch=16) # match well
points(RDA$CCA$biplot[, c(1,2)]*1.2, col = "red", pch=16) # match well
plot(RDA, scaling=2,display = c("bp", "cn"), main = "scale 2", xlim = c(-2, 2))
spe.sc <- scores(RDA, choices = 1:2, display = "sp")
# Calculate importance
R2 = goodness(RDA)[,2]
#select 2 important species/perf
spe.sc = spe.sc[order(-R2),][1:2,]
arrows(0, 0, spe.sc[,1], spe.sc[,2], length = 0.1, lty = 1, col = "red")
text(spe.sc[,1], spe.sc[,2]+0.05, row.names(spe.sc))
text(scores(RDA)$sites,
row.names(scores(RDA)$sites), cex = .5)
(R2 <- RsquareAdj(RDA)$r.squared) # 0.872
(R2adj <- RsquareAdj(RDA)$adj.r.squared) # 0.828
ST1 = stat[,1:4]
ST2 = stat[,5:8]
(spe.part <- varpart(perf, ST1, ST2))
plot(spe.part, digits=2)
anova.cca(RDA,by="axis",step=1000)
anova.cca(RDA, by="term", step=1000)
library(vegan)
stat = mtcars[, c('cyl','disp', 'drat', 'wt', 'vs', 'am', 'gear', 'carb')]
perf = mtcars[, c('mpg','hp', 'qsec')]
cca.cars <- cca(perf, stat)
# the total variation (inertia) in the data is: 0.07
round(cca.cars $tot.chi, 2)
# the sum of all canonical eigenvalues (Constrained inertia): 0.06
round(cca.cars$CCA$tot.chi, 2)
# all explanatory variables explain 88% of the total variation in the data
cat(round(cca.cars$CCA$tot.chi /cca.cars$tot.chi*100), "% of data", "\n")
# the first two (canonical) eigenvalues are: 0.06, 0.0
round(cca.cars$CCA$eig[1:2], 2)
# so the first two canonical axes explain 100% of the variation with the used environmental variables
cat(round(sum(cca.cars$CCA$eig[1:2]) /cca.cars$CCA$tot.chi * 100), "%", "\n")
# but this is (the first two canonical axes explain) 88% of the total variation in the data
cat(round(sum(cca.cars$CCA$eig[1:2]) /cca.cars$tot.chi * 100), "%", "\n")
plot(cca.cars, scaling = 2, main="Scaling2") # status scores are scaled by eigenvalues
plot(cca.cars, scaling = 1, main="Scaling1") # performance scores are scaled by eigenvalues
# 3D plot
library(vegan3d)
data(dune, dune.env)
ord <- cca(dune ~ A1 + Moisture, dune.env) ordiplot3d(ord)
### A boxed 'pin' version
ordiplot3d(ord, type = "h")
### More user control
pl <- ordiplot3d(ord, scaling = "symmetric", angle=15, type="n")
points(pl, "points", pch=16, col="red", cex = 0.7)
### identify(pl, "arrows", col="blue") would put labels in better positions
text(pl, "arrows", col="blue", pos=3)
text(pl, "centroids", col="blue", pos=1, cex = 1)
### Add species using xyz.convert function returned by ordiplot3d
sp <- scores(ord, choices=1:3, display="species", scaling="symmetric")
text(pl$xyz.convert(sp), rownames(sp), cex=0.7, xpd=TRUE)
### Two ways of adding fitted variables to ordination plots
ord <- cca(dune)
ef <- envfit(ord ~ Moisture + A1, dune.env, choices = 1:3)
### 1. use argument 'envfit'
ordiplot3d(ord, envfit = ef)
### 2. use returned envfit.convert function for better user control
pl3 <- ordiplot3d(ord)
plot(pl3$envfit.convert(ef), at = pl3$origin)
### envfit.convert() also handles different 'choices' of axes
pl3 <- ordiplot3d(ord, choices = c(1,3,2))
plot(pl3$envfit.convert(ef), at = pl3$origin)
### vegan::ordiXXXX functions can add items to the plot
ord <- cca(dune)
pl4 <- with(dune.env, ordiplot3d(ord, col = Management, pch=16))
with(dune.env, ordiellipse(pl4, Management, draw = "poly", col = 1:4, alpha = 60))
with(dune.env, ordispider(pl4, Management, col = 1:4, label = TRUE))
install('vegan3d')
# 3D plot
library(vegan3d)
data(dune, dune.env)
ord <- cca(dune ~ A1 + Moisture, dune.env) ordiplot3d(ord)
### A boxed 'pin' version
ordiplot3d(ord, type = "h")
### More user control
pl <- ordiplot3d(ord, scaling = "symmetric", angle=15, type="n")
points(pl, "points", pch=16, col="red", cex = 0.7)
### identify(pl, "arrows", col="blue") would put labels in better positions
text(pl, "arrows", col="blue", pos=3)
text(pl, "centroids", col="blue", pos=1, cex = 1)
### Add species using xyz.convert function returned by ordiplot3d
sp <- scores(ord, choices=1:3, display="species", scaling="symmetric")
text(pl$xyz.convert(sp), rownames(sp), cex=0.7, xpd=TRUE)
### Two ways of adding fitted variables to ordination plots
ord <- cca(dune)
ef <- envfit(ord ~ Moisture + A1, dune.env, choices = 1:3)
### 1. use argument 'envfit'
ordiplot3d(ord, envfit = ef)
### 2. use returned envfit.convert function for better user control
pl3 <- ordiplot3d(ord)
plot(pl3$envfit.convert(ef), at = pl3$origin)
### envfit.convert() also handles different 'choices' of axes
pl3 <- ordiplot3d(ord, choices = c(1,3,2))
plot(pl3$envfit.convert(ef), at = pl3$origin)
### vegan::ordiXXXX functions can add items to the plot
ord <- cca(dune)
pl4 <- with(dune.env, ordiplot3d(ord, col = Management, pch=16))
with(dune.env, ordiellipse(pl4, Management, draw = "poly", col = 1:4, alpha = 60))
with(dune.env, ordispider(pl4, Management, col = 1:4, label = TRUE))
install('gjam')
library(gjam)
